/*
 * generated by Xtext 2.26.0.M1
 */
package org.eclipse.viatra.solver.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ProblemGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProblemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.Problem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cProblemKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//Problem:
		//    ("problem" name=ID ".")?
		//    statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//("problem" name=ID ".")?
		//statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//("problem" name=ID ".")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"problem"
		public Keyword getProblemKeyword_0_0() { return cProblemKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPredicateDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssertionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScopeDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//    ClassDeclaration | PredicateDefinition | Assertion | ScopeDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ClassDeclaration | PredicateDefinition | Assertion | ScopeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ClassDeclaration
		public RuleCall getClassDeclarationParserRuleCall_0() { return cClassDeclarationParserRuleCall_0; }
		
		//PredicateDefinition
		public RuleCall getPredicateDefinitionParserRuleCall_1() { return cPredicateDefinitionParserRuleCall_1; }
		
		//Assertion
		public RuleCall getAssertionParserRuleCall_2() { return cAssertionParserRuleCall_2; }
		
		//ScopeDeclaration
		public RuleCall getScopeDeclarationParserRuleCall_3() { return cScopeDeclarationParserRuleCall_3; }
	}
	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperTypesClassDeclarationCrossReference_3_1_0 = (CrossReference)cSuperTypesAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperTypesClassDeclarationQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperTypesClassDeclarationCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cSuperTypesClassDeclarationCrossReference_3_2_1_0 = (CrossReference)cSuperTypesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cSuperTypesClassDeclarationQualifiedNameParserRuleCall_3_2_1_0_1 = (RuleCall)cSuperTypesClassDeclarationCrossReference_3_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Assignment cReferenceDeclarationsAssignment_4_0_1_0 = (Assignment)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cReferenceDeclarationsReferenceDeclarationParserRuleCall_4_0_1_0_0 = (RuleCall)cReferenceDeclarationsAssignment_4_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_1_1 = (Keyword)cGroup_4_0_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Keyword cFullStopKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//ClassDeclaration:
		//    abstract?="abstract"? "class"
		//    name=ID
		//    ("extends" superTypes+=[ClassDeclaration|QualifiedName] ("," superTypes+=[ClassDeclaration|QualifiedName])*)?
		//    ("{" (referenceDeclarations+=ReferenceDeclaration ";"?)* "}" | ".");
		@Override public ParserRule getRule() { return rule; }
		
		//abstract?="abstract"? "class"
		//name=ID
		//("extends" superTypes+=[ClassDeclaration|QualifiedName] ("," superTypes+=[ClassDeclaration|QualifiedName])*)?
		//("{" (referenceDeclarations+=ReferenceDeclaration ";"?)* "}" | ".")
		public Group getGroup() { return cGroup; }
		
		//abstract?="abstract"?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//("extends" superTypes+=[ClassDeclaration|QualifiedName] ("," superTypes+=[ClassDeclaration|QualifiedName])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superTypes+=[ClassDeclaration|QualifiedName]
		public Assignment getSuperTypesAssignment_3_1() { return cSuperTypesAssignment_3_1; }
		
		//[ClassDeclaration|QualifiedName]
		public CrossReference getSuperTypesClassDeclarationCrossReference_3_1_0() { return cSuperTypesClassDeclarationCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypesClassDeclarationQualifiedNameParserRuleCall_3_1_0_1() { return cSuperTypesClassDeclarationQualifiedNameParserRuleCall_3_1_0_1; }
		
		//("," superTypes+=[ClassDeclaration|QualifiedName])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//superTypes+=[ClassDeclaration|QualifiedName]
		public Assignment getSuperTypesAssignment_3_2_1() { return cSuperTypesAssignment_3_2_1; }
		
		//[ClassDeclaration|QualifiedName]
		public CrossReference getSuperTypesClassDeclarationCrossReference_3_2_1_0() { return cSuperTypesClassDeclarationCrossReference_3_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypesClassDeclarationQualifiedNameParserRuleCall_3_2_1_0_1() { return cSuperTypesClassDeclarationQualifiedNameParserRuleCall_3_2_1_0_1; }
		
		//("{" (referenceDeclarations+=ReferenceDeclaration ";"?)* "}" | ".")
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//"{" (referenceDeclarations+=ReferenceDeclaration ";"?)* "}"
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_0() { return cLeftCurlyBracketKeyword_4_0_0; }
		
		//(referenceDeclarations+=ReferenceDeclaration ";"?)*
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }
		
		//referenceDeclarations+=ReferenceDeclaration
		public Assignment getReferenceDeclarationsAssignment_4_0_1_0() { return cReferenceDeclarationsAssignment_4_0_1_0; }
		
		//ReferenceDeclaration
		public RuleCall getReferenceDeclarationsReferenceDeclarationParserRuleCall_4_0_1_0_0() { return cReferenceDeclarationsReferenceDeclarationParserRuleCall_4_0_1_0_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_4_0_1_1() { return cSemicolonKeyword_4_0_1_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_2() { return cRightCurlyBracketKeyword_4_0_2; }
		
		//"."
		public Keyword getFullStopKeyword_4_1() { return cFullStopKeyword_4_1; }
	}
	public class ReferenceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.ReferenceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cContainmentAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cContainmentContainsKeyword_0_0_0 = (Keyword)cContainmentAssignment_0_0.eContents().get(0);
		private final Keyword cRefersKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cReferenceTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceTypeClassDeclarationCrossReference_1_0 = (CrossReference)cReferenceTypeAssignment_1.eContents().get(0);
		private final RuleCall cReferenceTypeClassDeclarationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cReferenceTypeClassDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMultiplicityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_1_0 = (RuleCall)cMultiplicityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOppositeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOppositeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cOppositeReferenceDeclarationCrossReference_4_1_0 = (CrossReference)cOppositeAssignment_4_1.eContents().get(0);
		private final RuleCall cOppositeReferenceDeclarationQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cOppositeReferenceDeclarationCrossReference_4_1_0.eContents().get(1);
		
		//ReferenceDeclaration:
		//    (containment?="contains" | "refers")
		//    referenceType=[ClassDeclaration|QualifiedName]
		//    ("[" multiplicity=Multiplicity "]")?
		//    name=ID
		//    ("opposite" opposite=[ReferenceDeclaration|QualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//(containment?="contains" | "refers")
		//referenceType=[ClassDeclaration|QualifiedName]
		//("[" multiplicity=Multiplicity "]")?
		//name=ID
		//("opposite" opposite=[ReferenceDeclaration|QualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//(containment?="contains" | "refers")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//containment?="contains"
		public Assignment getContainmentAssignment_0_0() { return cContainmentAssignment_0_0; }
		
		//"contains"
		public Keyword getContainmentContainsKeyword_0_0_0() { return cContainmentContainsKeyword_0_0_0; }
		
		//"refers"
		public Keyword getRefersKeyword_0_1() { return cRefersKeyword_0_1; }
		
		//referenceType=[ClassDeclaration|QualifiedName]
		public Assignment getReferenceTypeAssignment_1() { return cReferenceTypeAssignment_1; }
		
		//[ClassDeclaration|QualifiedName]
		public CrossReference getReferenceTypeClassDeclarationCrossReference_1_0() { return cReferenceTypeClassDeclarationCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getReferenceTypeClassDeclarationQualifiedNameParserRuleCall_1_0_1() { return cReferenceTypeClassDeclarationQualifiedNameParserRuleCall_1_0_1; }
		
		//("[" multiplicity=Multiplicity "]")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_2_1() { return cMultiplicityAssignment_2_1; }
		
		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_1_0() { return cMultiplicityMultiplicityParserRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//("opposite" opposite=[ReferenceDeclaration|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }
		
		//"opposite"
		public Keyword getOppositeKeyword_4_0() { return cOppositeKeyword_4_0; }
		
		//opposite=[ReferenceDeclaration|QualifiedName]
		public Assignment getOppositeAssignment_4_1() { return cOppositeAssignment_4_1; }
		
		//[ReferenceDeclaration|QualifiedName]
		public CrossReference getOppositeReferenceDeclarationCrossReference_4_1_0() { return cOppositeReferenceDeclarationCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getOppositeReferenceDeclarationQualifiedNameParserRuleCall_4_1_0_1() { return cOppositeReferenceDeclarationQualifiedNameParserRuleCall_4_1_0_1; }
	}
	public class PredicateDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.PredicateDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cErrorAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Keyword cErrorErrorKeyword_0_0_0_0 = (Keyword)cErrorAssignment_0_0_0.eContents().get(0);
		private final Keyword cPredKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cPredKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonHyphenMinusKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBodiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBodiesConjunctionParserRuleCall_5_1_0 = (RuleCall)cBodiesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cBodiesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cBodiesConjunctionParserRuleCall_5_2_1_0 = (RuleCall)cBodiesAssignment_5_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PredicateDefinition:
		//    (error?="error" "pred"? | "pred")
		//    name=ID
		//    "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")"
		//    (":-" bodies+=Conjunction (";" bodies+=Conjunction)*)?
		//    ".";
		@Override public ParserRule getRule() { return rule; }
		
		//(error?="error" "pred"? | "pred")
		//name=ID
		//"(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")"
		//(":-" bodies+=Conjunction (";" bodies+=Conjunction)*)?
		//"."
		public Group getGroup() { return cGroup; }
		
		//(error?="error" "pred"? | "pred")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//error?="error" "pred"?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//error?="error"
		public Assignment getErrorAssignment_0_0_0() { return cErrorAssignment_0_0_0; }
		
		//"error"
		public Keyword getErrorErrorKeyword_0_0_0_0() { return cErrorErrorKeyword_0_0_0_0; }
		
		//"pred"?
		public Keyword getPredKeyword_0_0_1() { return cPredKeyword_0_0_1; }
		
		//"pred"
		public Keyword getPredKeyword_0_1() { return cPredKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//(":-" bodies+=Conjunction (";" bodies+=Conjunction)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//":-"
		public Keyword getColonHyphenMinusKeyword_5_0() { return cColonHyphenMinusKeyword_5_0; }
		
		//bodies+=Conjunction
		public Assignment getBodiesAssignment_5_1() { return cBodiesAssignment_5_1; }
		
		//Conjunction
		public RuleCall getBodiesConjunctionParserRuleCall_5_1_0() { return cBodiesConjunctionParserRuleCall_5_1_0; }
		
		//(";" bodies+=Conjunction)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//";"
		public Keyword getSemicolonKeyword_5_2_0() { return cSemicolonKeyword_5_2_0; }
		
		//bodies+=Conjunction
		public Assignment getBodiesAssignment_5_2_1() { return cBodiesAssignment_5_2_1; }
		
		//Conjunction
		public RuleCall getBodiesConjunctionParserRuleCall_5_2_1_0() { return cBodiesConjunctionParserRuleCall_5_2_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterTypeClassDeclarationCrossReference_0_0 = (CrossReference)cParameterTypeAssignment_0.eContents().get(0);
		private final RuleCall cParameterTypeClassDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cParameterTypeClassDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//    parameterType=[ClassDeclaration] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterType=[ClassDeclaration] name=ID
		public Group getGroup() { return cGroup; }
		
		//parameterType=[ClassDeclaration]
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }
		
		//[ClassDeclaration]
		public CrossReference getParameterTypeClassDeclarationCrossReference_0_0() { return cParameterTypeClassDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getParameterTypeClassDeclarationIDTerminalRuleCall_0_0_1() { return cParameterTypeClassDeclarationIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLiteralsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLiteralsLiteralParserRuleCall_0_0 = (RuleCall)cLiteralsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLiteralsLiteralParserRuleCall_1_1_0 = (RuleCall)cLiteralsAssignment_1_1.eContents().get(0);
		
		//Conjunction:
		//    literals+=Literal ("," literals+=Literal)*;
		@Override public ParserRule getRule() { return rule; }
		
		//literals+=Literal ("," literals+=Literal)*
		public Group getGroup() { return cGroup; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_0() { return cLiteralsAssignment_0; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_0_0() { return cLiteralsLiteralParserRuleCall_0_0; }
		
		//("," literals+=Literal)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_1_1() { return cLiteralsAssignment_1_1; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_1_1_0() { return cLiteralsLiteralParserRuleCall_1_1_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNegativeLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal:
		//    Atom | NegativeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//Atom | NegativeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }
		
		//NegativeLiteral
		public RuleCall getNegativeLiteralParserRuleCall_1() { return cNegativeLiteralParserRuleCall_1; }
	}
	public class NegativeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.NegativeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAtomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtomAtomParserRuleCall_1_0 = (RuleCall)cAtomAssignment_1.eContents().get(0);
		
		//NegativeLiteral:
		//    "!" atom=Atom;
		@Override public ParserRule getRule() { return rule; }
		
		//"!" atom=Atom
		public Group getGroup() { return cGroup; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//atom=Atom
		public Assignment getAtomAssignment_1() { return cAtomAssignment_1; }
		
		//Atom
		public RuleCall getAtomAtomParserRuleCall_1_0() { return cAtomAtomParserRuleCall_1_0; }
	}
	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.Atom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRelationRelationCrossReference_0_0 = (CrossReference)cRelationAssignment_0.eContents().get(0);
		private final RuleCall cRelationRelationQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cRelationRelationCrossReference_0_0.eContents().get(1);
		private final Assignment cTransitiveClosureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTransitiveClosurePlusSignKeyword_1_0 = (Keyword)cTransitiveClosureAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Atom:
		//    relation=[Relation|QualifiedName]
		//    transitiveClosure?="+"?
		//    "(" (arguments+=Argument ("," arguments+=Argument)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//relation=[Relation|QualifiedName]
		//transitiveClosure?="+"?
		//"(" (arguments+=Argument ("," arguments+=Argument)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//relation=[Relation|QualifiedName]
		public Assignment getRelationAssignment_0() { return cRelationAssignment_0; }
		
		//[Relation|QualifiedName]
		public CrossReference getRelationRelationCrossReference_0_0() { return cRelationRelationCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getRelationRelationQualifiedNameParserRuleCall_0_0_1() { return cRelationRelationQualifiedNameParserRuleCall_0_0_1; }
		
		//transitiveClosure?="+"?
		public Assignment getTransitiveClosureAssignment_1() { return cTransitiveClosureAssignment_1; }
		
		//"+"
		public Keyword getTransitiveClosurePlusSignKeyword_1_0() { return cTransitiveClosurePlusSignKeyword_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=Argument ("," arguments+=Argument)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_3_0_0() { return cArgumentsArgumentParserRuleCall_3_0_0; }
		
		//("," arguments+=Argument)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_3_1_1_0() { return cArgumentsArgumentParserRuleCall_3_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.Argument");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//Argument:
		//    variable=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1() { return cVariableVariableIDTerminalRuleCall_0_1; }
	}
	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cRelationAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cRelationRelationCrossReference_0_0_0_0 = (CrossReference)cRelationAssignment_0_0_0.eContents().get(0);
		private final RuleCall cRelationRelationQualifiedNameParserRuleCall_0_0_0_0_1 = (RuleCall)cRelationRelationCrossReference_0_0_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cGroup_0_0.eContents().get(2);
		private final Assignment cArgumentsAssignment_0_0_2_0 = (Assignment)cGroup_0_0_2.eContents().get(0);
		private final CrossReference cArgumentsNodeCrossReference_0_0_2_0_0 = (CrossReference)cArgumentsAssignment_0_0_2_0.eContents().get(0);
		private final RuleCall cArgumentsNodeQualifiedNameParserRuleCall_0_0_2_0_0_1 = (RuleCall)cArgumentsNodeCrossReference_0_0_2_0_0.eContents().get(1);
		private final Group cGroup_0_0_2_1 = (Group)cGroup_0_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_0_2_1_0 = (Keyword)cGroup_0_0_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_0_0_2_1_1 = (Assignment)cGroup_0_0_2_1.eContents().get(1);
		private final CrossReference cArgumentsNodeCrossReference_0_0_2_1_1_0 = (CrossReference)cArgumentsAssignment_0_0_2_1_1.eContents().get(0);
		private final RuleCall cArgumentsNodeQualifiedNameParserRuleCall_0_0_2_1_1_0_1 = (RuleCall)cArgumentsNodeCrossReference_0_0_2_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Keyword cColonKeyword_0_0_4 = (Keyword)cGroup_0_0.eContents().get(4);
		private final Assignment cValueAssignment_0_0_5 = (Assignment)cGroup_0_0.eContents().get(5);
		private final RuleCall cValueLogicValueEnumRuleCall_0_0_5_0 = (RuleCall)cValueAssignment_0_0_5.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cValueAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cValueShortLogicValueEnumRuleCall_0_1_0_0 = (RuleCall)cValueAssignment_0_1_0.eContents().get(0);
		private final Assignment cRelationAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cRelationRelationCrossReference_0_1_1_0 = (CrossReference)cRelationAssignment_0_1_1.eContents().get(0);
		private final RuleCall cRelationRelationQualifiedNameParserRuleCall_0_1_1_0_1 = (RuleCall)cRelationRelationCrossReference_0_1_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_0_1_3 = (Group)cGroup_0_1.eContents().get(3);
		private final Assignment cArgumentsAssignment_0_1_3_0 = (Assignment)cGroup_0_1_3.eContents().get(0);
		private final CrossReference cArgumentsNodeCrossReference_0_1_3_0_0 = (CrossReference)cArgumentsAssignment_0_1_3_0.eContents().get(0);
		private final RuleCall cArgumentsNodeQualifiedNameParserRuleCall_0_1_3_0_0_1 = (RuleCall)cArgumentsNodeCrossReference_0_1_3_0_0.eContents().get(1);
		private final Group cGroup_0_1_3_1 = (Group)cGroup_0_1_3.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_3_1_0 = (Keyword)cGroup_0_1_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_0_1_3_1_1 = (Assignment)cGroup_0_1_3_1.eContents().get(1);
		private final CrossReference cArgumentsNodeCrossReference_0_1_3_1_1_0 = (CrossReference)cArgumentsAssignment_0_1_3_1_1.eContents().get(0);
		private final RuleCall cArgumentsNodeQualifiedNameParserRuleCall_0_1_3_1_1_0_1 = (RuleCall)cArgumentsNodeCrossReference_0_1_3_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_1_4 = (Keyword)cGroup_0_1.eContents().get(4);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Assertion:
		//    (relation=[Relation|QualifiedName]
		//    "(" (arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)? ")"
		//    ":" value=LogicValue |
		//    value=ShortLogicValue?
		//    relation=[Relation|QualifiedName]
		//    "(" (arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)? ")")
		//    ".";
		@Override public ParserRule getRule() { return rule; }
		
		//(relation=[Relation|QualifiedName]
		//"(" (arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)? ")"
		//":" value=LogicValue |
		//value=ShortLogicValue?
		//relation=[Relation|QualifiedName]
		//"(" (arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)? ")")
		//"."
		public Group getGroup() { return cGroup; }
		
		//(relation=[Relation|QualifiedName]
		//"(" (arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)? ")"
		//":" value=LogicValue |
		//value=ShortLogicValue?
		//relation=[Relation|QualifiedName]
		//"(" (arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)? ")")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//relation=[Relation|QualifiedName]
		//    "(" (arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)? ")"
		//    ":" value=LogicValue
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//relation=[Relation|QualifiedName]
		public Assignment getRelationAssignment_0_0_0() { return cRelationAssignment_0_0_0; }
		
		//[Relation|QualifiedName]
		public CrossReference getRelationRelationCrossReference_0_0_0_0() { return cRelationRelationCrossReference_0_0_0_0; }
		
		//QualifiedName
		public RuleCall getRelationRelationQualifiedNameParserRuleCall_0_0_0_0_1() { return cRelationRelationQualifiedNameParserRuleCall_0_0_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }
		
		//(arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)?
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//arguments+=[Node|QualifiedName]
		public Assignment getArgumentsAssignment_0_0_2_0() { return cArgumentsAssignment_0_0_2_0; }
		
		//[Node|QualifiedName]
		public CrossReference getArgumentsNodeCrossReference_0_0_2_0_0() { return cArgumentsNodeCrossReference_0_0_2_0_0; }
		
		//QualifiedName
		public RuleCall getArgumentsNodeQualifiedNameParserRuleCall_0_0_2_0_0_1() { return cArgumentsNodeQualifiedNameParserRuleCall_0_0_2_0_0_1; }
		
		//("," arguments+=[Node|QualifiedName])*
		public Group getGroup_0_0_2_1() { return cGroup_0_0_2_1; }
		
		//","
		public Keyword getCommaKeyword_0_0_2_1_0() { return cCommaKeyword_0_0_2_1_0; }
		
		//arguments+=[Node|QualifiedName]
		public Assignment getArgumentsAssignment_0_0_2_1_1() { return cArgumentsAssignment_0_0_2_1_1; }
		
		//[Node|QualifiedName]
		public CrossReference getArgumentsNodeCrossReference_0_0_2_1_1_0() { return cArgumentsNodeCrossReference_0_0_2_1_1_0; }
		
		//QualifiedName
		public RuleCall getArgumentsNodeQualifiedNameParserRuleCall_0_0_2_1_1_0_1() { return cArgumentsNodeQualifiedNameParserRuleCall_0_0_2_1_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_0_3() { return cRightParenthesisKeyword_0_0_3; }
		
		//":"
		public Keyword getColonKeyword_0_0_4() { return cColonKeyword_0_0_4; }
		
		//value=LogicValue
		public Assignment getValueAssignment_0_0_5() { return cValueAssignment_0_0_5; }
		
		//LogicValue
		public RuleCall getValueLogicValueEnumRuleCall_0_0_5_0() { return cValueLogicValueEnumRuleCall_0_0_5_0; }
		
		//value=ShortLogicValue?
		//relation=[Relation|QualifiedName]
		//"(" (arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)? ")"
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//value=ShortLogicValue?
		public Assignment getValueAssignment_0_1_0() { return cValueAssignment_0_1_0; }
		
		//ShortLogicValue
		public RuleCall getValueShortLogicValueEnumRuleCall_0_1_0_0() { return cValueShortLogicValueEnumRuleCall_0_1_0_0; }
		
		//relation=[Relation|QualifiedName]
		public Assignment getRelationAssignment_0_1_1() { return cRelationAssignment_0_1_1; }
		
		//[Relation|QualifiedName]
		public CrossReference getRelationRelationCrossReference_0_1_1_0() { return cRelationRelationCrossReference_0_1_1_0; }
		
		//QualifiedName
		public RuleCall getRelationRelationQualifiedNameParserRuleCall_0_1_1_0_1() { return cRelationRelationQualifiedNameParserRuleCall_0_1_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_1_2() { return cLeftParenthesisKeyword_0_1_2; }
		
		//(arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)?
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//arguments+=[Node|QualifiedName]
		public Assignment getArgumentsAssignment_0_1_3_0() { return cArgumentsAssignment_0_1_3_0; }
		
		//[Node|QualifiedName]
		public CrossReference getArgumentsNodeCrossReference_0_1_3_0_0() { return cArgumentsNodeCrossReference_0_1_3_0_0; }
		
		//QualifiedName
		public RuleCall getArgumentsNodeQualifiedNameParserRuleCall_0_1_3_0_0_1() { return cArgumentsNodeQualifiedNameParserRuleCall_0_1_3_0_0_1; }
		
		//("," arguments+=[Node|QualifiedName])*
		public Group getGroup_0_1_3_1() { return cGroup_0_1_3_1; }
		
		//","
		public Keyword getCommaKeyword_0_1_3_1_0() { return cCommaKeyword_0_1_3_1_0; }
		
		//arguments+=[Node|QualifiedName]
		public Assignment getArgumentsAssignment_0_1_3_1_1() { return cArgumentsAssignment_0_1_3_1_1; }
		
		//[Node|QualifiedName]
		public CrossReference getArgumentsNodeCrossReference_0_1_3_1_1_0() { return cArgumentsNodeCrossReference_0_1_3_1_1_0; }
		
		//QualifiedName
		public RuleCall getArgumentsNodeQualifiedNameParserRuleCall_0_1_3_1_1_0_1() { return cArgumentsNodeQualifiedNameParserRuleCall_0_1_3_1_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_1_4() { return cRightParenthesisKeyword_0_1_4; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class ScopeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.ScopeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeScopesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeScopesTypeScopeParserRuleCall_1_0 = (RuleCall)cTypeScopesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeScopesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeScopesTypeScopeParserRuleCall_2_1_0 = (RuleCall)cTypeScopesAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ScopeDeclaration:
		//    "scope" typeScopes+=TypeScope ("," typeScopes+=TypeScope)* ".";
		@Override public ParserRule getRule() { return rule; }
		
		//"scope" typeScopes+=TypeScope ("," typeScopes+=TypeScope)* "."
		public Group getGroup() { return cGroup; }
		
		//"scope"
		public Keyword getScopeKeyword_0() { return cScopeKeyword_0; }
		
		//typeScopes+=TypeScope
		public Assignment getTypeScopesAssignment_1() { return cTypeScopesAssignment_1; }
		
		//TypeScope
		public RuleCall getTypeScopesTypeScopeParserRuleCall_1_0() { return cTypeScopesTypeScopeParserRuleCall_1_0; }
		
		//("," typeScopes+=TypeScope)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//typeScopes+=TypeScope
		public Assignment getTypeScopesAssignment_2_1() { return cTypeScopesAssignment_2_1; }
		
		//TypeScope
		public RuleCall getTypeScopesTypeScopeParserRuleCall_2_1_0() { return cTypeScopesTypeScopeParserRuleCall_2_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}
	public class TypeScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.TypeScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetTypeClassDeclarationCrossReference_0_0 = (CrossReference)cTargetTypeAssignment_0.eContents().get(0);
		private final RuleCall cTargetTypeClassDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetTypeClassDeclarationCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIncrementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIncrementPlusSignEqualsSignKeyword_1_0_0 = (Keyword)cIncrementAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cMultiplicityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultiplicityDefiniteMultiplicityParserRuleCall_2_0 = (RuleCall)cMultiplicityAssignment_2.eContents().get(0);
		
		//TypeScope:
		//    targetType=[ClassDeclaration]
		//    (increment?="+=" | "=")
		//    multiplicity=DefiniteMultiplicity;
		@Override public ParserRule getRule() { return rule; }
		
		//targetType=[ClassDeclaration]
		//(increment?="+=" | "=")
		//multiplicity=DefiniteMultiplicity
		public Group getGroup() { return cGroup; }
		
		//targetType=[ClassDeclaration]
		public Assignment getTargetTypeAssignment_0() { return cTargetTypeAssignment_0; }
		
		//[ClassDeclaration]
		public CrossReference getTargetTypeClassDeclarationCrossReference_0_0() { return cTargetTypeClassDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getTargetTypeClassDeclarationIDTerminalRuleCall_0_0_1() { return cTargetTypeClassDeclarationIDTerminalRuleCall_0_0_1; }
		
		//(increment?="+=" | "=")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//increment?="+="
		public Assignment getIncrementAssignment_1_0() { return cIncrementAssignment_1_0; }
		
		//"+="
		public Keyword getIncrementPlusSignEqualsSignKeyword_1_0_0() { return cIncrementPlusSignEqualsSignKeyword_1_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//multiplicity=DefiniteMultiplicity
		public Assignment getMultiplicityAssignment_2() { return cMultiplicityAssignment_2; }
		
		//DefiniteMultiplicity
		public RuleCall getMultiplicityDefiniteMultiplicityParserRuleCall_2_0() { return cMultiplicityDefiniteMultiplicityParserRuleCall_2_0; }
	}
	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.Multiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnboundedMultiplicityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefiniteMultiplicityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Multiplicity:
		//    UnboundedMultiplicity | DefiniteMultiplicity;
		@Override public ParserRule getRule() { return rule; }
		
		//UnboundedMultiplicity | DefiniteMultiplicity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnboundedMultiplicity
		public RuleCall getUnboundedMultiplicityParserRuleCall_0() { return cUnboundedMultiplicityParserRuleCall_0; }
		
		//DefiniteMultiplicity
		public RuleCall getDefiniteMultiplicityParserRuleCall_1() { return cDefiniteMultiplicityParserRuleCall_1; }
	}
	public class DefiniteMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.DefiniteMultiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeMultiplicityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExactMultiplicityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DefiniteMultiplicity returns Multiplicity:
		//    RangeMultiplicity | ExactMultiplicity;
		@Override public ParserRule getRule() { return rule; }
		
		//RangeMultiplicity | ExactMultiplicity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RangeMultiplicity
		public RuleCall getRangeMultiplicityParserRuleCall_0() { return cRangeMultiplicityParserRuleCall_0; }
		
		//ExactMultiplicity
		public RuleCall getExactMultiplicityParserRuleCall_1() { return cExactMultiplicityParserRuleCall_1; }
	}
	public class UnboundedMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.UnboundedMultiplicity");
		private final Action cUnboundedMultiplicityAction = (Action)rule.eContents().get(1);
		
		//UnboundedMultiplicity:
		//    {UnboundedMultiplicity};
		@Override public ParserRule getRule() { return rule; }
		
		//{UnboundedMultiplicity}
		public Action getUnboundedMultiplicityAction() { return cUnboundedMultiplicityAction; }
	}
	public class RangeMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.RangeMultiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerBoundINTTerminalRuleCall_0_0 = (RuleCall)cLowerBoundAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpperBoundUpperBoundParserRuleCall_2_0 = (RuleCall)cUpperBoundAssignment_2.eContents().get(0);
		
		//RangeMultiplicity:
		//    lowerBound=INT ".." upperBound=UpperBound;
		@Override public ParserRule getRule() { return rule; }
		
		//lowerBound=INT ".." upperBound=UpperBound
		public Group getGroup() { return cGroup; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_0_0() { return cLowerBoundINTTerminalRuleCall_0_0; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//upperBound=UpperBound
		public Assignment getUpperBoundAssignment_2() { return cUpperBoundAssignment_2; }
		
		//UpperBound
		public RuleCall getUpperBoundUpperBoundParserRuleCall_2_0() { return cUpperBoundUpperBoundParserRuleCall_2_0; }
	}
	public class ExactMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.ExactMultiplicity");
		private final Assignment cExactValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExactValueINTTerminalRuleCall_0 = (RuleCall)cExactValueAssignment.eContents().get(0);
		
		//ExactMultiplicity:
		//    exactValue=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//exactValue=INT
		public Assignment getExactValueAssignment() { return cExactValueAssignment; }
		
		//INT
		public RuleCall getExactValueINTTerminalRuleCall_0() { return cExactValueINTTerminalRuleCall_0; }
	}
	public class UpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.UpperBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UpperBound returns ecore::EInt:
		//    INT | "*";
		@Override public ParserRule getRule() { return rule; }
		
		//INT | "*"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.QualifiedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQUOTED_IDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cQUOTED_IDTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		
		//QualifiedName:
		//    QUOTED_ID | ID (":" ID)* (":" QUOTED_ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//QUOTED_ID | ID (":" ID)* (":" QUOTED_ID)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QUOTED_ID
		public RuleCall getQUOTED_IDTerminalRuleCall_0() { return cQUOTED_IDTerminalRuleCall_0; }
		
		//ID (":" ID)* (":" QUOTED_ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//(":" ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//":"
		public Keyword getColonKeyword_1_1_0() { return cColonKeyword_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
		
		//(":" QUOTED_ID)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//":"
		public Keyword getColonKeyword_1_2_0() { return cColonKeyword_1_2_0; }
		
		//QUOTED_ID
		public RuleCall getQUOTED_IDTerminalRuleCall_1_2_1() { return cQUOTED_IDTerminalRuleCall_1_2_1; }
	}
	
	public class LogicValueElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.LogicValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNKNOWNEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNKNOWNUnknownKeyword_2_0 = (Keyword)cUNKNOWNEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum LogicValue:
		//    TRUE="true" | FALSE="false" | UNKNOWN="unknown";
		public EnumRule getRule() { return rule; }
		
		//TRUE="true" | FALSE="false" | UNKNOWN="unknown"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE="true"
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//"true"
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE="false"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//"false"
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
		
		//UNKNOWN="unknown"
		public EnumLiteralDeclaration getUNKNOWNEnumLiteralDeclaration_2() { return cUNKNOWNEnumLiteralDeclaration_2; }
		
		//"unknown"
		public Keyword getUNKNOWNUnknownKeyword_2_0() { return cUNKNOWNUnknownKeyword_2_0; }
	}
	public class ShortLogicValueElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.ShortLogicValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFALSEExclamationMarkKeyword_0_0 = (Keyword)cFALSEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNKNOWNEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNKNOWNQuestionMarkKeyword_1_0 = (Keyword)cUNKNOWNEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ShortLogicValue returns LogicValue:
		//    FALSE="!" | UNKNOWN="?";
		public EnumRule getRule() { return rule; }
		
		//FALSE="!" | UNKNOWN="?"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FALSE="!"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_0() { return cFALSEEnumLiteralDeclaration_0; }
		
		//"!"
		public Keyword getFALSEExclamationMarkKeyword_0_0() { return cFALSEExclamationMarkKeyword_0_0; }
		
		//UNKNOWN="?"
		public EnumLiteralDeclaration getUNKNOWNEnumLiteralDeclaration_1() { return cUNKNOWNEnumLiteralDeclaration_1; }
		
		//"?"
		public Keyword getUNKNOWNQuestionMarkKeyword_1_0() { return cUNKNOWNQuestionMarkKeyword_1_0; }
	}
	
	private final ProblemElements pProblem;
	private final StatementElements pStatement;
	private final ClassDeclarationElements pClassDeclaration;
	private final ReferenceDeclarationElements pReferenceDeclaration;
	private final PredicateDefinitionElements pPredicateDefinition;
	private final ParameterElements pParameter;
	private final ConjunctionElements pConjunction;
	private final LiteralElements pLiteral;
	private final NegativeLiteralElements pNegativeLiteral;
	private final AtomElements pAtom;
	private final ArgumentElements pArgument;
	private final AssertionElements pAssertion;
	private final LogicValueElements eLogicValue;
	private final ShortLogicValueElements eShortLogicValue;
	private final ScopeDeclarationElements pScopeDeclaration;
	private final TypeScopeElements pTypeScope;
	private final MultiplicityElements pMultiplicity;
	private final DefiniteMultiplicityElements pDefiniteMultiplicity;
	private final UnboundedMultiplicityElements pUnboundedMultiplicity;
	private final RangeMultiplicityElements pRangeMultiplicity;
	private final ExactMultiplicityElements pExactMultiplicity;
	private final UpperBoundElements pUpperBound;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tSTRING;
	private final TerminalRule tQUOTED_ID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProblemGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProblem = new ProblemElements();
		this.pStatement = new StatementElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pReferenceDeclaration = new ReferenceDeclarationElements();
		this.pPredicateDefinition = new PredicateDefinitionElements();
		this.pParameter = new ParameterElements();
		this.pConjunction = new ConjunctionElements();
		this.pLiteral = new LiteralElements();
		this.pNegativeLiteral = new NegativeLiteralElements();
		this.pAtom = new AtomElements();
		this.pArgument = new ArgumentElements();
		this.pAssertion = new AssertionElements();
		this.eLogicValue = new LogicValueElements();
		this.eShortLogicValue = new ShortLogicValueElements();
		this.pScopeDeclaration = new ScopeDeclarationElements();
		this.pTypeScope = new TypeScopeElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pDefiniteMultiplicity = new DefiniteMultiplicityElements();
		this.pUnboundedMultiplicity = new UnboundedMultiplicityElements();
		this.pRangeMultiplicity = new RangeMultiplicityElements();
		this.pExactMultiplicity = new ExactMultiplicityElements();
		this.pUpperBound = new UpperBoundElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.STRING");
		this.tQUOTED_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.viatra.solver.language.Problem.QUOTED_ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.viatra.solver.language.Problem".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Problem:
	//    ("problem" name=ID ".")?
	//    statements+=Statement*;
	public ProblemElements getProblemAccess() {
		return pProblem;
	}
	
	public ParserRule getProblemRule() {
		return getProblemAccess().getRule();
	}
	
	//Statement:
	//    ClassDeclaration | PredicateDefinition | Assertion | ScopeDeclaration;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ClassDeclaration:
	//    abstract?="abstract"? "class"
	//    name=ID
	//    ("extends" superTypes+=[ClassDeclaration|QualifiedName] ("," superTypes+=[ClassDeclaration|QualifiedName])*)?
	//    ("{" (referenceDeclarations+=ReferenceDeclaration ";"?)* "}" | ".");
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}
	
	//ReferenceDeclaration:
	//    (containment?="contains" | "refers")
	//    referenceType=[ClassDeclaration|QualifiedName]
	//    ("[" multiplicity=Multiplicity "]")?
	//    name=ID
	//    ("opposite" opposite=[ReferenceDeclaration|QualifiedName])?;
	public ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return pReferenceDeclaration;
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}
	
	//PredicateDefinition:
	//    (error?="error" "pred"? | "pred")
	//    name=ID
	//    "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")"
	//    (":-" bodies+=Conjunction (";" bodies+=Conjunction)*)?
	//    ".";
	public PredicateDefinitionElements getPredicateDefinitionAccess() {
		return pPredicateDefinition;
	}
	
	public ParserRule getPredicateDefinitionRule() {
		return getPredicateDefinitionAccess().getRule();
	}
	
	//Parameter:
	//    parameterType=[ClassDeclaration] name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Conjunction:
	//    literals+=Literal ("," literals+=Literal)*;
	public ConjunctionElements getConjunctionAccess() {
		return pConjunction;
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}
	
	//Literal:
	//    Atom | NegativeLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//NegativeLiteral:
	//    "!" atom=Atom;
	public NegativeLiteralElements getNegativeLiteralAccess() {
		return pNegativeLiteral;
	}
	
	public ParserRule getNegativeLiteralRule() {
		return getNegativeLiteralAccess().getRule();
	}
	
	//Atom:
	//    relation=[Relation|QualifiedName]
	//    transitiveClosure?="+"?
	//    "(" (arguments+=Argument ("," arguments+=Argument)*)? ")";
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}
	
	//Argument:
	//    variable=[Variable];
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//Assertion:
	//    (relation=[Relation|QualifiedName]
	//    "(" (arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)? ")"
	//    ":" value=LogicValue |
	//    value=ShortLogicValue?
	//    relation=[Relation|QualifiedName]
	//    "(" (arguments+=[Node|QualifiedName] ("," arguments+=[Node|QualifiedName])*)? ")")
	//    ".";
	public AssertionElements getAssertionAccess() {
		return pAssertion;
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}
	
	//enum LogicValue:
	//    TRUE="true" | FALSE="false" | UNKNOWN="unknown";
	public LogicValueElements getLogicValueAccess() {
		return eLogicValue;
	}
	
	public EnumRule getLogicValueRule() {
		return getLogicValueAccess().getRule();
	}
	
	//enum ShortLogicValue returns LogicValue:
	//    FALSE="!" | UNKNOWN="?";
	public ShortLogicValueElements getShortLogicValueAccess() {
		return eShortLogicValue;
	}
	
	public EnumRule getShortLogicValueRule() {
		return getShortLogicValueAccess().getRule();
	}
	
	//ScopeDeclaration:
	//    "scope" typeScopes+=TypeScope ("," typeScopes+=TypeScope)* ".";
	public ScopeDeclarationElements getScopeDeclarationAccess() {
		return pScopeDeclaration;
	}
	
	public ParserRule getScopeDeclarationRule() {
		return getScopeDeclarationAccess().getRule();
	}
	
	//TypeScope:
	//    targetType=[ClassDeclaration]
	//    (increment?="+=" | "=")
	//    multiplicity=DefiniteMultiplicity;
	public TypeScopeElements getTypeScopeAccess() {
		return pTypeScope;
	}
	
	public ParserRule getTypeScopeRule() {
		return getTypeScopeAccess().getRule();
	}
	
	//Multiplicity:
	//    UnboundedMultiplicity | DefiniteMultiplicity;
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//DefiniteMultiplicity returns Multiplicity:
	//    RangeMultiplicity | ExactMultiplicity;
	public DefiniteMultiplicityElements getDefiniteMultiplicityAccess() {
		return pDefiniteMultiplicity;
	}
	
	public ParserRule getDefiniteMultiplicityRule() {
		return getDefiniteMultiplicityAccess().getRule();
	}
	
	//UnboundedMultiplicity:
	//    {UnboundedMultiplicity};
	public UnboundedMultiplicityElements getUnboundedMultiplicityAccess() {
		return pUnboundedMultiplicity;
	}
	
	public ParserRule getUnboundedMultiplicityRule() {
		return getUnboundedMultiplicityAccess().getRule();
	}
	
	//RangeMultiplicity:
	//    lowerBound=INT ".." upperBound=UpperBound;
	public RangeMultiplicityElements getRangeMultiplicityAccess() {
		return pRangeMultiplicity;
	}
	
	public ParserRule getRangeMultiplicityRule() {
		return getRangeMultiplicityAccess().getRule();
	}
	
	//ExactMultiplicity:
	//    exactValue=INT;
	public ExactMultiplicityElements getExactMultiplicityAccess() {
		return pExactMultiplicity;
	}
	
	public ParserRule getExactMultiplicityRule() {
		return getExactMultiplicityAccess().getRule();
	}
	
	//UpperBound returns ecore::EInt:
	//    INT | "*";
	public UpperBoundElements getUpperBoundAccess() {
		return pUpperBound;
	}
	
	public ParserRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}
	
	//QualifiedName:
	//    QUOTED_ID | ID (":" ID)* (":" QUOTED_ID)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//@Override
	//terminal STRING: '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal QUOTED_ID: "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'";
	public TerminalRule getQUOTED_IDRule() {
		return tQUOTED_ID;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.25.0
 */
package org.eclipse.viatra.solver.language.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.viatra.solver.language.model.problem.Argument;
import org.eclipse.viatra.solver.language.model.problem.ExistentialQuantifier;
import org.eclipse.viatra.solver.language.model.problem.PredicateDefinition;
import org.eclipse.viatra.solver.language.model.problem.ProblemPackage;
import org.eclipse.viatra.solver.language.model.problem.Variable;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class ProblemScopeProvider extends AbstractProblemScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		IScope scope = super.getScope(context, reference);
		if (reference == ProblemPackage.Literals.ARGUMENT__VARIABLE) {
			return getVariableScope(context, scope);
		}
		return scope;
	}

	protected IScope getVariableScope(EObject context, IScope delegateScope) {
		List<Variable> variables = new ArrayList<>();
		EObject currentContext = context;
		if (context instanceof Argument) {
			Argument argument = (Argument) context;
			Variable singletonVariable = argument.getSingletonVariable();
			if (singletonVariable != null) {
				variables.add(singletonVariable);
			}
		}
		while (currentContext != null && !(currentContext instanceof PredicateDefinition)) {
			if (currentContext instanceof ExistentialQuantifier) {
				ExistentialQuantifier quantifier = (ExistentialQuantifier) currentContext;
				variables.addAll(quantifier.getImplicitVariables());
			}
			currentContext = currentContext.eContainer();
		}
		if (currentContext instanceof PredicateDefinition) {
			PredicateDefinition definition = (PredicateDefinition) currentContext;
			variables.addAll(definition.getParameters());
		}
		return Scopes.scopeFor(variables);
	}
}

/*
 * generated by Xtext 2.25.0
 */
package org.eclipse.viatra.solver.language.tests

import com.google.inject.Inject
import org.eclipse.viatra.solver.language.model.problem.Problem
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static org.hamcrest.MatcherAssert.assertThat
import static org.hamcrest.Matchers.*

@ExtendWith(InjectionExtension)
@InjectWith(ProblemInjectorProvider)
class ProblemScopingTest {
	@Inject
	ParseHelper<Problem> parseHelper

	@Inject
	extension ProblemTestUtil

	@Test
	def void builtInArgumentTypeTest() {
		val it = parseHelper.parse('''
			pred predicate(node a, data b, int c).
		''').assertNoErrors
		assertThat(pred('predicate').param(0).parameterType, equalTo(builtin.findClass('node')))
		assertThat(pred('predicate').param(1).parameterType, equalTo(builtin.findClass('data')))
		assertThat(pred('predicate').param(2).parameterType, equalTo(builtin.findClass('int')))
	}

	@Test
	def void builtiQualifiedArgumentTypeTest() {
		val it = parseHelper.parse('''
			pred predicate(builtin::node a, builtin::data b, builtin::int c).
		''').assertNoErrors
		assertThat(pred('predicate').param(0).parameterType, equalTo(builtin.findClass('node')))
		assertThat(pred('predicate').param(1).parameterType, equalTo(builtin.findClass('data')))
		assertThat(pred('predicate').param(2).parameterType, equalTo(builtin.findClass('int')))
	}

	@Test
	def void implicitNodeInAssertionTest() {
		val it = parseHelper.parse('''
			pred predicate(node a, node b).
			predicate(a, a).
			?predicate(a, b).
		''').assertNoErrors
		assertThat(nodeNames, hasItems('a', 'b'))
		assertThat(assertion(0).arg(0).node, equalTo(node('a')))
		assertThat(assertion(0).arg(1).node, equalTo(node('a')))
		assertThat(assertion(1).arg(0).node, equalTo(node('a')))
		assertThat(assertion(1).arg(1).node, equalTo(node('b')))
	}

	@Test
	def void quotedNodeInAssertionTest() {
		val it = parseHelper.parse('''
			pred predicate(node a, node b).
			predicate('a', 'a').
			?predicate('a', 'b').
		''').assertNoErrors
		assertThat(nodeNames, hasItems("'a'", "'b'"))
		assertThat(assertion(0).arg(0).node, equalTo(node("'a'")))
		assertThat(assertion(0).arg(1).node, equalTo(node("'a'")))
		assertThat(assertion(1).arg(0).node, equalTo(node("'a'")))
		assertThat(assertion(1).arg(1).node, equalTo(node("'b'")))
	}

	@Test
	def void builtInNodeInAssertionTest() {
		val it = parseHelper.parse('''
			pred predicate(node a).
			predicate(int::new).
		''').assertNoErrors
		assertThat(nodes, empty)
		assertThat(assertion(0).arg(0).node, equalTo(builtin.findClass('int').newNode))
	}
	
	@Test
	def void qualifiedBuiltInNodeInAssertionTest() {
		val it = parseHelper.parse('''
			pred predicate(node a).
			predicate(builtin::int::new).
		''').assertNoErrors
		assertThat(nodes, empty)
		assertThat(assertion(0).arg(0).node, equalTo(builtin.findClass('int').newNode))
	}

	@Test
	def void classNewNodeTest() {
		val it = parseHelper.parse('''
			class Foo.
			pred predicate(node a).
			predicate(Foo::new).
		''').assertNoErrors
		assertThat(nodes, empty)
		assertThat(assertion(0).arg(0).node, equalTo(findClass('Foo').newNode))
	}
	
	
	@Test
	def void qualifiedClassNewNodeTest() {
		val it = parseHelper.parse('''
			problem test.
			class Foo.
			pred predicate(node a).
			predicate(test::Foo::new).
		''').assertNoErrors
		assertThat(nodes, empty)
		assertThat(assertion(0).arg(0).node, equalTo(findClass('Foo').newNode))
	}
	
	@Test
	def void newNodeIsNotSpecial() {
		val it = parseHelper.parse('''
			class Foo.
			pred predicate(node a).
			predicate(new).
		''').assertNoErrors
		assertThat(nodeNames, hasItem('new'))
		assertThat(assertion(0).arg(0).node, not(equalTo(findClass('Foo').newNode)))
	}
	
	@Test
	def void implicitNodeInPredicateTest() {
		val it = parseHelper.parse('''
			pred predicate(node a) :- node(b).
			predicate(b).
		''').assertNoErrors
		assertThat(nodeNames, hasItem("b"))
		assertThat(pred("predicate").conj(0).lit(0).arg(0).node, equalTo(node("b")))
		assertThat(assertion(0).arg(0).node, equalTo(node("b")))
	}
	
	@Test
	def void quotedNodeInPredicateTest() {
		val it = parseHelper.parse('''
			pred predicate(node a) :- node('b').
		''').assertNoErrors
		assertThat(nodeNames, hasItem("'b'"))
		assertThat(pred("predicate").conj(0).lit(0).arg(0).node, equalTo(node("'b'")))
	}
}

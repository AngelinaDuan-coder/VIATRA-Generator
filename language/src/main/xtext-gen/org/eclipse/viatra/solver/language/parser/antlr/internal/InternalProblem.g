/*
 * generated by Xtext 2.26.0.M1
 */
grammar InternalProblem;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.viatra.solver.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.viatra.solver.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.viatra.solver.language.services.ProblemGrammarAccess;

}

@parser::members {

 	private ProblemGrammarAccess grammarAccess;

    public InternalProblemParser(TokenStream input, ProblemGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Problem";
   	}

   	@Override
   	protected ProblemGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProblem
entryRuleProblem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProblemRule()); }
	iv_ruleProblem=ruleProblem
	{ $current=$iv_ruleProblem.current; }
	EOF;

// Rule Problem
ruleProblem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='problem'
			{
				newLeafNode(otherlv_0, grammarAccess.getProblemAccess().getProblemKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProblemAccess().getNameIdentifierParserRuleCall_0_1_0());
					}
					lv_name_1_0=ruleIdentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProblemRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.viatra.solver.language.Problem.Identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getProblemAccess().getFullStopKeyword_0_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getProblemAccess().getStatementsStatementParserRuleCall_1_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProblemRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.eclipse.viatra.solver.language.Problem.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getClassDeclarationParserRuleCall_0());
		}
		this_ClassDeclaration_0=ruleClassDeclaration
		{
			$current = $this_ClassDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getEnumDeclarationParserRuleCall_1());
		}
		this_EnumDeclaration_1=ruleEnumDeclaration
		{
			$current = $this_EnumDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPredicateDefinitionParserRuleCall_2());
		}
		this_PredicateDefinition_2=rulePredicateDefinition
		{
			$current = $this_PredicateDefinition_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAssertionParserRuleCall_3());
		}
		this_Assertion_3=ruleAssertion
		{
			$current = $this_Assertion_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getNodeValueAssertionParserRuleCall_4());
		}
		this_NodeValueAssertion_4=ruleNodeValueAssertion
		{
			$current = $this_NodeValueAssertion_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getScopeDeclarationParserRuleCall_5());
		}
		this_ScopeDeclaration_5=ruleScopeDeclaration
		{
			$current = $this_ScopeDeclaration_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleClassDeclaration
entryRuleClassDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassDeclarationRule()); }
	iv_ruleClassDeclaration=ruleClassDeclaration
	{ $current=$iv_ruleClassDeclaration.current; }
	EOF;

// Rule ClassDeclaration
ruleClassDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_abstract_0_0='abstract'
				{
					newLeafNode(lv_abstract_0_0, grammarAccess.getClassDeclarationAccess().getAbstractAbstractKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassDeclarationRule());
					}
					setWithLastConsumed($current, "abstract", lv_abstract_0_0 != null, "abstract");
				}
			)
		)?
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getClassDeclarationAccess().getClassKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassDeclarationAccess().getNameIdentifierParserRuleCall_2_0());
				}
				lv_name_2_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.viatra.solver.language.Problem.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getClassDeclarationAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClassDeclarationRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getClassDeclarationAccess().getSuperTypesRelationCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getClassDeclarationAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getClassDeclarationRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getClassDeclarationAccess().getSuperTypesRelationCrossReference_3_2_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				otherlv_7='{'
				{
					newLeafNode(otherlv_7, grammarAccess.getClassDeclarationAccess().getLeftCurlyBracketKeyword_4_0_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getClassDeclarationAccess().getReferenceDeclarationsReferenceDeclarationParserRuleCall_4_0_1_0_0());
							}
							lv_referenceDeclarations_8_0=ruleReferenceDeclaration
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getClassDeclarationRule());
								}
								add(
									$current,
									"referenceDeclarations",
									lv_referenceDeclarations_8_0,
									"org.eclipse.viatra.solver.language.Problem.ReferenceDeclaration");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_9=';'
						{
							newLeafNode(otherlv_9, grammarAccess.getClassDeclarationAccess().getSemicolonKeyword_4_0_1_1());
						}
					)?
				)*
				otherlv_10='}'
				{
					newLeafNode(otherlv_10, grammarAccess.getClassDeclarationAccess().getRightCurlyBracketKeyword_4_0_2());
				}
			)
			    |
			otherlv_11='.'
			{
				newLeafNode(otherlv_11, grammarAccess.getClassDeclarationAccess().getFullStopKeyword_4_1());
			}
		)
	)
;

// Entry rule entryRuleEnumDeclaration
entryRuleEnumDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumDeclarationRule()); }
	iv_ruleEnumDeclaration=ruleEnumDeclaration
	{ $current=$iv_ruleEnumDeclaration.current; }
	EOF;

// Rule EnumDeclaration
ruleEnumDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumDeclarationAccess().getEnumKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumDeclarationAccess().getNameIdentifierParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.viatra.solver.language.Problem.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_2='{'
				{
					newLeafNode(otherlv_2, grammarAccess.getEnumDeclarationAccess().getLeftCurlyBracketKeyword_2_0_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getEnumDeclarationAccess().getLiteralsEnumLiteralParserRuleCall_2_0_1_0_0());
							}
							lv_literals_3_0=ruleEnumLiteral
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
								}
								add(
									$current,
									"literals",
									lv_literals_3_0,
									"org.eclipse.viatra.solver.language.Problem.EnumLiteral");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_4=','
						{
							newLeafNode(otherlv_4, grammarAccess.getEnumDeclarationAccess().getCommaKeyword_2_0_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getEnumDeclarationAccess().getLiteralsEnumLiteralParserRuleCall_2_0_1_1_1_0());
								}
								lv_literals_5_0=ruleEnumLiteral
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
									}
									add(
										$current,
										"literals",
										lv_literals_5_0,
										"org.eclipse.viatra.solver.language.Problem.EnumLiteral");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
					(
						otherlv_6=','
						{
							newLeafNode(otherlv_6, grammarAccess.getEnumDeclarationAccess().getCommaKeyword_2_0_1_2_0());
						}
						    |
						otherlv_7=';'
						{
							newLeafNode(otherlv_7, grammarAccess.getEnumDeclarationAccess().getSemicolonKeyword_2_0_1_2_1());
						}
					)?
				)?
				otherlv_8='}'
				{
					newLeafNode(otherlv_8, grammarAccess.getEnumDeclarationAccess().getRightCurlyBracketKeyword_2_0_2());
				}
			)
			    |
			otherlv_9='.'
			{
				newLeafNode(otherlv_9, grammarAccess.getEnumDeclarationAccess().getFullStopKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleEnumLiteral
entryRuleEnumLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumLiteralRule()); }
	iv_ruleEnumLiteral=ruleEnumLiteral
	{ $current=$iv_ruleEnumLiteral.current; }
	EOF;

// Rule EnumLiteral
ruleEnumLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getEnumLiteralAccess().getNameQuotedOrUnquotedIdParserRuleCall_0());
			}
			lv_name_0_0=ruleQuotedOrUnquotedId
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getEnumLiteralRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.viatra.solver.language.Problem.QuotedOrUnquotedId");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleReferenceDeclaration
entryRuleReferenceDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceDeclarationRule()); }
	iv_ruleReferenceDeclaration=ruleReferenceDeclaration
	{ $current=$iv_ruleReferenceDeclaration.current; }
	EOF;

// Rule ReferenceDeclaration
ruleReferenceDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_containment_0_0='contains'
					{
						newLeafNode(lv_containment_0_0, grammarAccess.getReferenceDeclarationAccess().getContainmentContainsKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReferenceDeclarationRule());
						}
						setWithLastConsumed($current, "containment", lv_containment_0_0 != null, "contains");
					}
				)
			)
			    |
			otherlv_1='refers'
			{
				newLeafNode(otherlv_1, grammarAccess.getReferenceDeclarationAccess().getRefersKeyword_0_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReferenceDeclarationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getReferenceDeclarationAccess().getReferenceTypeRelationCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getReferenceDeclarationAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReferenceDeclarationAccess().getMultiplicityMultiplicityParserRuleCall_2_1_0());
					}
					lv_multiplicity_4_0=ruleMultiplicity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferenceDeclarationRule());
						}
						set(
							$current,
							"multiplicity",
							lv_multiplicity_4_0,
							"org.eclipse.viatra.solver.language.Problem.Multiplicity");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getReferenceDeclarationAccess().getRightSquareBracketKeyword_2_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getReferenceDeclarationAccess().getNameIdentifierParserRuleCall_3_0());
				}
				lv_name_6_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReferenceDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_6_0,
						"org.eclipse.viatra.solver.language.Problem.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7='opposite'
			{
				newLeafNode(otherlv_7, grammarAccess.getReferenceDeclarationAccess().getOppositeKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReferenceDeclarationRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getReferenceDeclarationAccess().getOppositeReferenceDeclarationCrossReference_4_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePredicateDefinition
entryRulePredicateDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateDefinitionRule()); }
	iv_rulePredicateDefinition=rulePredicateDefinition
	{ $current=$iv_rulePredicateDefinition.current; }
	EOF;

// Rule PredicateDefinition
rulePredicateDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						lv_error_0_0='error'
						{
							newLeafNode(lv_error_0_0, grammarAccess.getPredicateDefinitionAccess().getErrorErrorKeyword_0_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPredicateDefinitionRule());
							}
							setWithLastConsumed($current, "error", lv_error_0_0 != null, "error");
						}
					)
				)
				(
					otherlv_1='pred'
					{
						newLeafNode(otherlv_1, grammarAccess.getPredicateDefinitionAccess().getPredKeyword_0_0_1());
					}
				)?
			)
			    |
			otherlv_2='pred'
			{
				newLeafNode(otherlv_2, grammarAccess.getPredicateDefinitionAccess().getPredKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPredicateDefinitionAccess().getNameIdentifierParserRuleCall_1_0());
				}
				lv_name_3_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredicateDefinitionRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.viatra.solver.language.Problem.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getPredicateDefinitionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateDefinitionAccess().getParametersParameterParserRuleCall_3_0_0());
					}
					lv_parameters_5_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateDefinitionRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_5_0,
							"org.eclipse.viatra.solver.language.Problem.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getPredicateDefinitionAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPredicateDefinitionAccess().getParametersParameterParserRuleCall_3_1_1_0());
						}
						lv_parameters_7_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPredicateDefinitionRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_7_0,
								"org.eclipse.viatra.solver.language.Problem.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getPredicateDefinitionAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_9=':-'
			{
				newLeafNode(otherlv_9, grammarAccess.getPredicateDefinitionAccess().getColonHyphenMinusKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPredicateDefinitionAccess().getBodiesConjunctionParserRuleCall_5_1_0());
					}
					lv_bodies_10_0=ruleConjunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredicateDefinitionRule());
						}
						add(
							$current,
							"bodies",
							lv_bodies_10_0,
							"org.eclipse.viatra.solver.language.Problem.Conjunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11=';'
				{
					newLeafNode(otherlv_11, grammarAccess.getPredicateDefinitionAccess().getSemicolonKeyword_5_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPredicateDefinitionAccess().getBodiesConjunctionParserRuleCall_5_2_1_0());
						}
						lv_bodies_12_0=ruleConjunction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPredicateDefinitionRule());
							}
							add(
								$current,
								"bodies",
								lv_bodies_12_0,
								"org.eclipse.viatra.solver.language.Problem.Conjunction");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_13='.'
		{
			newLeafNode(otherlv_13, grammarAccess.getPredicateDefinitionAccess().getFullStopKeyword_6());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getParameterAccess().getParameterTypeRelationCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getNameIdentifierParserRuleCall_1_0());
				}
				lv_name_1_0=ruleIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.viatra.solver.language.Problem.Identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConjunction
entryRuleConjunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); }
	iv_ruleConjunction=ruleConjunction
	{ $current=$iv_ruleConjunction.current; }
	EOF;

// Rule Conjunction
ruleConjunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConjunctionAccess().getLiteralsLiteralParserRuleCall_0_0());
				}
				lv_literals_0_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConjunctionRule());
					}
					add(
						$current,
						"literals",
						lv_literals_0_0,
						"org.eclipse.viatra.solver.language.Problem.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getConjunctionAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConjunctionAccess().getLiteralsLiteralParserRuleCall_1_1_0());
					}
					lv_literals_2_0=ruleLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConjunctionRule());
						}
						add(
							$current,
							"literals",
							lv_literals_2_0,
							"org.eclipse.viatra.solver.language.Problem.Literal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getAtomParserRuleCall_0());
		}
		this_Atom_0=ruleAtom
		{
			$current = $this_Atom_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getNegativeLiteralParserRuleCall_1());
		}
		this_NegativeLiteral_1=ruleNegativeLiteral
		{
			$current = $this_NegativeLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNegativeLiteral
entryRuleNegativeLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegativeLiteralRule()); }
	iv_ruleNegativeLiteral=ruleNegativeLiteral
	{ $current=$iv_ruleNegativeLiteral.current; }
	EOF;

// Rule NegativeLiteral
ruleNegativeLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!'
		{
			newLeafNode(otherlv_0, grammarAccess.getNegativeLiteralAccess().getExclamationMarkKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNegativeLiteralAccess().getAtomAtomParserRuleCall_1_0());
				}
				lv_atom_1_0=ruleAtom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegativeLiteralRule());
					}
					set(
						$current,
						"atom",
						lv_atom_1_0,
						"org.eclipse.viatra.solver.language.Problem.Atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleAtom=ruleAtom
	{ $current=$iv_ruleAtom.current; }
	EOF;

// Rule Atom
ruleAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAtomAccess().getRelationRelationCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_transitiveClosure_1_0='+'
				{
					newLeafNode(lv_transitiveClosure_1_0, grammarAccess.getAtomAccess().getTransitiveClosurePlusSignKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomRule());
					}
					setWithLastConsumed($current, "transitiveClosure", lv_transitiveClosure_1_0 != null, "+");
				}
			)
		)?
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomAccess().getArgumentsArgumentParserRuleCall_3_0_0());
					}
					lv_arguments_3_0=ruleArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"org.eclipse.viatra.solver.language.Problem.Argument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAtomAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAtomAccess().getArgumentsArgumentParserRuleCall_3_1_1_0());
						}
						lv_arguments_5_0=ruleArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAtomRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_5_0,
								"org.eclipse.viatra.solver.language.Problem.Argument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getAtomAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getArgumentAccess().getVariableOrNodeArgumentParserRuleCall_0());
		}
		this_VariableOrNodeArgument_0=ruleVariableOrNodeArgument
		{
			$current = $this_VariableOrNodeArgument_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getArgumentAccess().getConstantArgumentParserRuleCall_1());
		}
		this_ConstantArgument_1=ruleConstantArgument
		{
			$current = $this_ConstantArgument_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableOrNodeArgument
entryRuleVariableOrNodeArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableOrNodeArgumentRule()); }
	iv_ruleVariableOrNodeArgument=ruleVariableOrNodeArgument
	{ $current=$iv_ruleVariableOrNodeArgument.current; }
	EOF;

// Rule VariableOrNodeArgument
ruleVariableOrNodeArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableOrNodeArgumentRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getVariableOrNodeArgumentAccess().getVariableOrNodeVariableOrNodeCrossReference_0());
			}
			ruleQualifiedName
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleConstantArgument
entryRuleConstantArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantArgumentRule()); }
	iv_ruleConstantArgument=ruleConstantArgument
	{ $current=$iv_ruleConstantArgument.current; }
	EOF;

// Rule ConstantArgument
ruleConstantArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getConstantArgumentAccess().getConstantConstantParserRuleCall_0());
			}
			lv_constant_0_0=ruleConstant
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getConstantArgumentRule());
				}
				set(
					$current,
					"constant",
					lv_constant_0_0,
					"org.eclipse.viatra.solver.language.Problem.Constant");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	iv_ruleAssertion=ruleAssertion
	{ $current=$iv_ruleAssertion.current; }
	EOF;

// Rule Assertion
ruleAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAssertionRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getAssertionAccess().getRelationRelationCrossReference_0_0_0_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_1='('
				{
					newLeafNode(otherlv_1, grammarAccess.getAssertionAccess().getLeftParenthesisKeyword_0_0_1());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getAssertionAccess().getArgumentsAssertionArgumentParserRuleCall_0_0_2_0_0());
							}
							lv_arguments_2_0=ruleAssertionArgument
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAssertionRule());
								}
								add(
									$current,
									"arguments",
									lv_arguments_2_0,
									"org.eclipse.viatra.solver.language.Problem.AssertionArgument");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_3=','
						{
							newLeafNode(otherlv_3, grammarAccess.getAssertionAccess().getCommaKeyword_0_0_2_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getAssertionAccess().getArgumentsAssertionArgumentParserRuleCall_0_0_2_1_1_0());
								}
								lv_arguments_4_0=ruleAssertionArgument
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getAssertionRule());
									}
									add(
										$current,
										"arguments",
										lv_arguments_4_0,
										"org.eclipse.viatra.solver.language.Problem.AssertionArgument");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getAssertionAccess().getRightParenthesisKeyword_0_0_3());
				}
				otherlv_6=':'
				{
					newLeafNode(otherlv_6, grammarAccess.getAssertionAccess().getColonKeyword_0_0_4());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAssertionAccess().getValueLogicValueEnumRuleCall_0_0_5_0());
						}
						lv_value_7_0=ruleLogicValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssertionRule());
							}
							set(
								$current,
								"value",
								lv_value_7_0,
								"org.eclipse.viatra.solver.language.Problem.LogicValue");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAssertionAccess().getValueShortLogicValueEnumRuleCall_0_1_0_0());
						}
						lv_value_8_0=ruleShortLogicValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssertionRule());
							}
							set(
								$current,
								"value",
								lv_value_8_0,
								"org.eclipse.viatra.solver.language.Problem.ShortLogicValue");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAssertionRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getAssertionAccess().getRelationRelationCrossReference_0_1_1_0());
						}
						ruleQualifiedName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_10='('
				{
					newLeafNode(otherlv_10, grammarAccess.getAssertionAccess().getLeftParenthesisKeyword_0_1_2());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getAssertionAccess().getArgumentsAssertionArgumentParserRuleCall_0_1_3_0_0());
							}
							lv_arguments_11_0=ruleAssertionArgument
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAssertionRule());
								}
								add(
									$current,
									"arguments",
									lv_arguments_11_0,
									"org.eclipse.viatra.solver.language.Problem.AssertionArgument");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_12=','
						{
							newLeafNode(otherlv_12, grammarAccess.getAssertionAccess().getCommaKeyword_0_1_3_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getAssertionAccess().getArgumentsAssertionArgumentParserRuleCall_0_1_3_1_1_0());
								}
								lv_arguments_13_0=ruleAssertionArgument
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getAssertionRule());
									}
									add(
										$current,
										"arguments",
										lv_arguments_13_0,
										"org.eclipse.viatra.solver.language.Problem.AssertionArgument");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_14=')'
				{
					newLeafNode(otherlv_14, grammarAccess.getAssertionAccess().getRightParenthesisKeyword_0_1_4());
				}
			)
		)
		otherlv_15='.'
		{
			newLeafNode(otherlv_15, grammarAccess.getAssertionAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleAssertionArgument
entryRuleAssertionArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionArgumentRule()); }
	iv_ruleAssertionArgument=ruleAssertionArgument
	{ $current=$iv_ruleAssertionArgument.current; }
	EOF;

// Rule AssertionArgument
ruleAssertionArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssertionArgumentAccess().getNodeAssertionArgumentParserRuleCall_0());
		}
		this_NodeAssertionArgument_0=ruleNodeAssertionArgument
		{
			$current = $this_NodeAssertionArgument_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAssertionArgumentAccess().getConstantAssertionArgumentParserRuleCall_1());
		}
		this_ConstantAssertionArgument_1=ruleConstantAssertionArgument
		{
			$current = $this_ConstantAssertionArgument_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNodeAssertionArgument
entryRuleNodeAssertionArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeAssertionArgumentRule()); }
	iv_ruleNodeAssertionArgument=ruleNodeAssertionArgument
	{ $current=$iv_ruleNodeAssertionArgument.current; }
	EOF;

// Rule NodeAssertionArgument
ruleNodeAssertionArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNodeAssertionArgumentRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getNodeAssertionArgumentAccess().getNodeNodeCrossReference_0());
			}
			ruleQualifiedName
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleConstantAssertionArgument
entryRuleConstantAssertionArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantAssertionArgumentRule()); }
	iv_ruleConstantAssertionArgument=ruleConstantAssertionArgument
	{ $current=$iv_ruleConstantAssertionArgument.current; }
	EOF;

// Rule ConstantAssertionArgument
ruleConstantAssertionArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getConstantAssertionArgumentAccess().getConstantConstantParserRuleCall_0());
			}
			lv_constant_0_0=ruleConstant
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getConstantAssertionArgumentRule());
				}
				set(
					$current,
					"constant",
					lv_constant_0_0,
					"org.eclipse.viatra.solver.language.Problem.Constant");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleNodeValueAssertion
entryRuleNodeValueAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeValueAssertionRule()); }
	iv_ruleNodeValueAssertion=ruleNodeValueAssertion
	{ $current=$iv_ruleNodeValueAssertion.current; }
	EOF;

// Rule NodeValueAssertion
ruleNodeValueAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeValueAssertionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getNodeValueAssertionAccess().getNodeNodeCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getNodeValueAssertionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNodeValueAssertionAccess().getValueConstantParserRuleCall_2_0());
				}
				lv_value_2_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodeValueAssertionRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.viatra.solver.language.Problem.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getNodeValueAssertionAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstantAccess().getIntConstantParserRuleCall_0());
		}
		this_IntConstant_0=ruleIntConstant
		{
			$current = $this_IntConstant_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getRealConstantParserRuleCall_1());
		}
		this_RealConstant_1=ruleRealConstant
		{
			$current = $this_RealConstant_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getStringConstantParserRuleCall_2());
		}
		this_StringConstant_2=ruleStringConstant
		{
			$current = $this_StringConstant_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntConstant
entryRuleIntConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntConstantRule()); }
	iv_ruleIntConstant=ruleIntConstant
	{ $current=$iv_ruleIntConstant.current; }
	EOF;

// Rule IntConstant
ruleIntConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getIntConstantAccess().getIntValueIntegerParserRuleCall_0());
			}
			lv_intValue_0_0=ruleInteger
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getIntConstantRule());
				}
				set(
					$current,
					"intValue",
					lv_intValue_0_0,
					"org.eclipse.viatra.solver.language.Problem.Integer");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleRealConstant
entryRuleRealConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealConstantRule()); }
	iv_ruleRealConstant=ruleRealConstant
	{ $current=$iv_ruleRealConstant.current; }
	EOF;

// Rule RealConstant
ruleRealConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRealConstantAccess().getRealValueRealParserRuleCall_0());
			}
			lv_realValue_0_0=ruleReal
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRealConstantRule());
				}
				set(
					$current,
					"realValue",
					lv_realValue_0_0,
					"org.eclipse.viatra.solver.language.Problem.Real");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStringConstant
entryRuleStringConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringConstantRule()); }
	iv_ruleStringConstant=ruleStringConstant
	{ $current=$iv_ruleStringConstant.current; }
	EOF;

// Rule StringConstant
ruleStringConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_stringValue_0_0=RULE_STRING
			{
				newLeafNode(lv_stringValue_0_0, grammarAccess.getStringConstantAccess().getStringValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringConstantRule());
				}
				setWithLastConsumed(
					$current,
					"stringValue",
					lv_stringValue_0_0,
					"org.eclipse.viatra.solver.language.Problem.STRING");
			}
		)
	)
;

// Entry rule entryRuleScopeDeclaration
entryRuleScopeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScopeDeclarationRule()); }
	iv_ruleScopeDeclaration=ruleScopeDeclaration
	{ $current=$iv_ruleScopeDeclaration.current; }
	EOF;

// Rule ScopeDeclaration
ruleScopeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scope'
		{
			newLeafNode(otherlv_0, grammarAccess.getScopeDeclarationAccess().getScopeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScopeDeclarationAccess().getTypeScopesTypeScopeParserRuleCall_1_0());
				}
				lv_typeScopes_1_0=ruleTypeScope
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScopeDeclarationRule());
					}
					add(
						$current,
						"typeScopes",
						lv_typeScopes_1_0,
						"org.eclipse.viatra.solver.language.Problem.TypeScope");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getScopeDeclarationAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeDeclarationAccess().getTypeScopesTypeScopeParserRuleCall_2_1_0());
					}
					lv_typeScopes_3_0=ruleTypeScope
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeDeclarationRule());
						}
						add(
							$current,
							"typeScopes",
							lv_typeScopes_3_0,
							"org.eclipse.viatra.solver.language.Problem.TypeScope");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='.'
		{
			newLeafNode(otherlv_4, grammarAccess.getScopeDeclarationAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRuleTypeScope
entryRuleTypeScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeScopeRule()); }
	iv_ruleTypeScope=ruleTypeScope
	{ $current=$iv_ruleTypeScope.current; }
	EOF;

// Rule TypeScope
ruleTypeScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeScopeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getTypeScopeAccess().getTargetTypeClassDeclarationCrossReference_0_0());
				}
			)
		)
		(
			(
				(
					lv_increment_1_0='+='
					{
						newLeafNode(lv_increment_1_0, grammarAccess.getTypeScopeAccess().getIncrementPlusSignEqualsSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeScopeRule());
						}
						setWithLastConsumed($current, "increment", lv_increment_1_0 != null, "+=");
					}
				)
			)
			    |
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeScopeAccess().getEqualsSignKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeScopeAccess().getMultiplicityDefiniteMultiplicityParserRuleCall_2_0());
				}
				lv_multiplicity_3_0=ruleDefiniteMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeScopeRule());
					}
					set(
						$current,
						"multiplicity",
						lv_multiplicity_3_0,
						"org.eclipse.viatra.solver.language.Problem.DefiniteMultiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMultiplicity
entryRuleMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicityRule()); }
	iv_ruleMultiplicity=ruleMultiplicity
	{ $current=$iv_ruleMultiplicity.current; }
	EOF;

// Rule Multiplicity
ruleMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicityAccess().getUnboundedMultiplicityParserRuleCall_0());
		}
		this_UnboundedMultiplicity_0=ruleUnboundedMultiplicity
		{
			$current = $this_UnboundedMultiplicity_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMultiplicityAccess().getDefiniteMultiplicityParserRuleCall_1());
		}
		this_DefiniteMultiplicity_1=ruleDefiniteMultiplicity
		{
			$current = $this_DefiniteMultiplicity_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefiniteMultiplicity
entryRuleDefiniteMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefiniteMultiplicityRule()); }
	iv_ruleDefiniteMultiplicity=ruleDefiniteMultiplicity
	{ $current=$iv_ruleDefiniteMultiplicity.current; }
	EOF;

// Rule DefiniteMultiplicity
ruleDefiniteMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDefiniteMultiplicityAccess().getRangeMultiplicityParserRuleCall_0());
		}
		this_RangeMultiplicity_0=ruleRangeMultiplicity
		{
			$current = $this_RangeMultiplicity_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDefiniteMultiplicityAccess().getExactMultiplicityParserRuleCall_1());
		}
		this_ExactMultiplicity_1=ruleExactMultiplicity
		{
			$current = $this_ExactMultiplicity_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnboundedMultiplicity
entryRuleUnboundedMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnboundedMultiplicityRule()); }
	iv_ruleUnboundedMultiplicity=ruleUnboundedMultiplicity
	{ $current=$iv_ruleUnboundedMultiplicity.current; }
	EOF;

// Rule UnboundedMultiplicity
ruleUnboundedMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			$current = forceCreateModelElement(
				grammarAccess.getUnboundedMultiplicityAccess().getUnboundedMultiplicityAction(),
				$current);
		}
	)
;

// Entry rule entryRuleRangeMultiplicity
entryRuleRangeMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeMultiplicityRule()); }
	iv_ruleRangeMultiplicity=ruleRangeMultiplicity
	{ $current=$iv_ruleRangeMultiplicity.current; }
	EOF;

// Rule RangeMultiplicity
ruleRangeMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_lowerBound_0_0=RULE_INT
				{
					newLeafNode(lv_lowerBound_0_0, grammarAccess.getRangeMultiplicityAccess().getLowerBoundINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeMultiplicityRule());
					}
					setWithLastConsumed(
						$current,
						"lowerBound",
						lv_lowerBound_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1='..'
		{
			newLeafNode(otherlv_1, grammarAccess.getRangeMultiplicityAccess().getFullStopFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeMultiplicityAccess().getUpperBoundUpperBoundParserRuleCall_2_0());
				}
				lv_upperBound_2_0=ruleUpperBound
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeMultiplicityRule());
					}
					set(
						$current,
						"upperBound",
						lv_upperBound_2_0,
						"org.eclipse.viatra.solver.language.Problem.UpperBound");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExactMultiplicity
entryRuleExactMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExactMultiplicityRule()); }
	iv_ruleExactMultiplicity=ruleExactMultiplicity
	{ $current=$iv_ruleExactMultiplicity.current; }
	EOF;

// Rule ExactMultiplicity
ruleExactMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_exactValue_0_0=RULE_INT
			{
				newLeafNode(lv_exactValue_0_0, grammarAccess.getExactMultiplicityAccess().getExactValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExactMultiplicityRule());
				}
				setWithLastConsumed(
					$current,
					"exactValue",
					lv_exactValue_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleUpperBound
entryRuleUpperBound returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUpperBoundRule()); }
	iv_ruleUpperBound=ruleUpperBound
	{ $current=$iv_ruleUpperBound.current.getText(); }
	EOF;

// Rule UpperBound
ruleUpperBound returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getUpperBoundAccess().getINTTerminalRuleCall_0());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUpperBoundAccess().getAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleQuotedOrUnquotedId
entryRuleQuotedOrUnquotedId returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQuotedOrUnquotedIdRule()); }
	iv_ruleQuotedOrUnquotedId=ruleQuotedOrUnquotedId
	{ $current=$iv_ruleQuotedOrUnquotedId.current.getText(); }
	EOF;

// Rule QuotedOrUnquotedId
ruleQuotedOrUnquotedId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_QUOTED_ID_0=RULE_QUOTED_ID
		{
			$current.merge(this_QUOTED_ID_0);
		}
		{
			newLeafNode(this_QUOTED_ID_0, grammarAccess.getQuotedOrUnquotedIdAccess().getQUOTED_IDTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getQuotedOrUnquotedIdAccess().getIdentifierParserRuleCall_1());
		}
		this_Identifier_1=ruleIdentifier
		{
			$current.merge(this_Identifier_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		this_QUOTED_ID_0=RULE_QUOTED_ID
		{
			$current.merge(this_QUOTED_ID_0);
		}
		{
			newLeafNode(this_QUOTED_ID_0, grammarAccess.getQualifiedNameAccess().getQUOTED_IDTerminalRuleCall_0());
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getQualifiedNameAccess().getIdentifierParserRuleCall_1_0());
			}
			this_Identifier_1=ruleIdentifier
			{
				$current.merge(this_Identifier_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw='::'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1_1_0());
				}
				{
					newCompositeNode(grammarAccess.getQualifiedNameAccess().getIdentifierParserRuleCall_1_1_1());
				}
				this_Identifier_3=ruleIdentifier
				{
					$current.merge(this_Identifier_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			(
				kw='::'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getColonColonKeyword_1_2_0());
				}
				this_QUOTED_ID_5=RULE_QUOTED_ID
				{
					$current.merge(this_QUOTED_ID_5);
				}
				{
					newLeafNode(this_QUOTED_ID_5, grammarAccess.getQualifiedNameAccess().getQUOTED_IDTerminalRuleCall_1_2_1());
				}
			)?
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleIdentifier=ruleIdentifier
	{ $current=$iv_ruleIdentifier.current.getText(); }
	EOF;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0());
		}
		    |
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIdentifierAccess().getTrueKeyword_1());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIdentifierAccess().getFalseKeyword_2());
		}
		    |
		kw='e'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIdentifierAccess().getEKeyword_3());
		}
		    |
		kw='E'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIdentifierAccess().getEKeyword_4());
		}
	)
;

// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getIntegerRule()); }
	iv_ruleInteger=ruleInteger
	{ $current=$iv_ruleInteger.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleReal
entryRuleReal returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getRealRule()); }
	iv_ruleReal=ruleReal
	{ $current=$iv_ruleReal.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Real
ruleReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getRealAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getRealAccess().getINTTerminalRuleCall_1());
		}
		(
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRealAccess().getFullStopKeyword_2_0_0());
				}
				this_INT_3=RULE_INT
				{
					$current.merge(this_INT_3);
				}
				{
					newLeafNode(this_INT_3, grammarAccess.getRealAccess().getINTTerminalRuleCall_2_0_1());
				}
			)
			    |
			(
				(
					kw='.'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getRealAccess().getFullStopKeyword_2_1_0_0());
					}
					this_INT_5=RULE_INT
					{
						$current.merge(this_INT_5);
					}
					{
						newLeafNode(this_INT_5, grammarAccess.getRealAccess().getINTTerminalRuleCall_2_1_0_1());
					}
				)?
				(
					kw='e'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getRealAccess().getEKeyword_2_1_1_0());
					}
					    |
					kw='E'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getRealAccess().getEKeyword_2_1_1_1());
					}
				)
				(
					kw='-'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getRealAccess().getHyphenMinusKeyword_2_1_2_0());
					}
					    |
					kw='+'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getRealAccess().getPlusSignKeyword_2_1_2_1());
					}
				)?
				this_INT_10=RULE_INT
				{
					$current.merge(this_INT_10);
				}
				{
					newLeafNode(this_INT_10, grammarAccess.getRealAccess().getINTTerminalRuleCall_2_1_3());
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Rule LogicValue
ruleLogicValue returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='true'
			{
				$current = grammarAccess.getLogicValueAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogicValueAccess().getTRUEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='false'
			{
				$current = grammarAccess.getLogicValueAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogicValueAccess().getFALSEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='unknown'
			{
				$current = grammarAccess.getLogicValueAccess().getUNKNOWNEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLogicValueAccess().getUNKNOWNEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ShortLogicValue
ruleShortLogicValue returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='!'
			{
				$current = grammarAccess.getShortLogicValueAccess().getFALSEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getShortLogicValueAccess().getFALSEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='?'
			{
				$current = grammarAccess.getShortLogicValueAccess().getUNKNOWNEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getShortLogicValueAccess().getUNKNOWNEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' ('\\' .|~(('\\'|'"')))* '"';

RULE_QUOTED_ID : '\'' ('\\' .|~(('\\'|'\'')))* '\'';

RULE_SL_COMMENT : ('%'|'//') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
